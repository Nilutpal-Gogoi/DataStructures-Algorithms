> Binary Tree:
    A binary tree is a tree in which each node has between 0-2 children. They're called the left and right children of the
  node.

> Types Of Binary Trees:
  1) Complete Binary Trees -
    A complete binary tree is a binary tree in which all the levels of the tree are fully filled, except for perhaps the
  last level which can be filled from left to right.
    > The total no of nodes,n, in a complete binary tree of height "h" are:
        2^h <= nodes <= 2^(h+1) - 1.
    > The total number of non-leaf nodes, n in a complete binary tree of height "h" is:
        floor(2^(h-1)) <= n <= 2^h - 1
    > The total number of leaf-nodes, n in a complete binary tree of height "h" is:
        2^(h-1) <= n <= 2^h
    > The nodes n present in between range of:
        2^h <= n <= 2^(h+1)-1

  2) Full Binary Trees -
    In full or "proper" binary tree, every node has 0 or 2 children. No node can have 1 child.
    The total number of nodes in a full binary tree of height "h" can be expressed as:
       2h+1 <= total number of nodes <= [2^(h+1)]-1
  3) Perfect Binary Trees -
    A binary tree is said to be perfect if it is both full and complete.
    > The total number of nodes in a perfect binary tree of height "h" are given as: 2^(h+1)-1
    > The total number of leaf nodes are given as 2^h or (n+1)/2

> Implementation of Binary Tree :
    class Node(object):
        def __init__(self, value):
            self.value = value
            self.left = None
            self.right = None

    class BinaryTree(object):
        def __init__(self, root):
            self.root = Node(root)

    tree = BinaryTree(1)
    tree.root.left = Node(2)
    tree.root.right = Node(3)
    tree.root.left.left = Node(4)
    tree.root.left.right = Node(5)
    tree.root.right.left = Node(6)
    tree.root.right.right = Node(7)


> SKEWED BINARY TREES -
    These are the binary trees such that all the nodes except one have one and only one child. All of the children nodes
  are either left or right child nodes so the entire tree is positioned to the left or the right side.
  > This type of Binary Tree structure should be avoided at all costs because the time complexity of most operations
  will be high.